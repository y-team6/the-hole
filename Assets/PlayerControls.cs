//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""NonVR"",
            ""id"": ""b3022c17-3bcc-47e1-86ba-0ac1fed65a29"",
            ""actions"": [
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""3b84fea9-4b2a-460a-914f-c206d86321f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""d56064ea-1f7b-4730-88ed-de2b0a4f8d40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a70bbb1a-192a-4046-bfe7-72518d0b941a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0680cf7e-c25f-4753-b830-0d3c9e4e6297"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NonVR
        m_NonVR = asset.FindActionMap("NonVR", throwIfNotFound: true);
        m_NonVR_Direction = m_NonVR.FindAction("Direction", throwIfNotFound: true);
        m_NonVR_Shoot = m_NonVR.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NonVR
    private readonly InputActionMap m_NonVR;
    private INonVRActions m_NonVRActionsCallbackInterface;
    private readonly InputAction m_NonVR_Direction;
    private readonly InputAction m_NonVR_Shoot;
    public struct NonVRActions
    {
        private @PlayerControls m_Wrapper;
        public NonVRActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Direction => m_Wrapper.m_NonVR_Direction;
        public InputAction @Shoot => m_Wrapper.m_NonVR_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_NonVR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NonVRActions set) { return set.Get(); }
        public void SetCallbacks(INonVRActions instance)
        {
            if (m_Wrapper.m_NonVRActionsCallbackInterface != null)
            {
                @Direction.started -= m_Wrapper.m_NonVRActionsCallbackInterface.OnDirection;
                @Direction.performed -= m_Wrapper.m_NonVRActionsCallbackInterface.OnDirection;
                @Direction.canceled -= m_Wrapper.m_NonVRActionsCallbackInterface.OnDirection;
                @Shoot.started -= m_Wrapper.m_NonVRActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_NonVRActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_NonVRActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_NonVRActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Direction.started += instance.OnDirection;
                @Direction.performed += instance.OnDirection;
                @Direction.canceled += instance.OnDirection;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public NonVRActions @NonVR => new NonVRActions(this);
    public interface INonVRActions
    {
        void OnDirection(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
